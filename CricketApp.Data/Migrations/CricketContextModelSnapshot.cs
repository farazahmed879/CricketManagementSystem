// <auto-generated />
using System;
using CricketApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CricketApp.Data.Migrations
{
    [DbContext(typeof(CricketContext))]
    partial class CricketContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CricketApp.Domain.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("ApplicationUserRoleId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CricketApp.Domain.ApplicationUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CricketApp.Domain.BattingStyle", b =>
                {
                    b.Property<int>("BattingStyleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("BattingStyleId");

                    b.ToTable("BattingStyle");
                });

            modelBuilder.Entity("CricketApp.Domain.BowlingStyle", b =>
                {
                    b.Property<int>("BowlingStyleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("BowlingStyleId");

                    b.ToTable("BowlingStyle");
                });

            modelBuilder.Entity("CricketApp.Domain.FallOfWicket", b =>
                {
                    b.Property<int>("FallOfWicketId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Eight");

                    b.Property<int>("Fifth");

                    b.Property<int>("First");

                    b.Property<int>("Fourth");

                    b.Property<int>("MatchId");

                    b.Property<int>("Ninth");

                    b.Property<int>("Second");

                    b.Property<int>("Seventh");

                    b.Property<int>("Sixth");

                    b.Property<int>("TeamId");

                    b.Property<int>("Tenth");

                    b.Property<int>("Third");

                    b.HasKey("FallOfWicketId");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("FallOFWickets");
                });

            modelBuilder.Entity("CricketApp.Domain.Ground", b =>
                {
                    b.Property<int>("GroundId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location")
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .HasMaxLength(25);

                    b.HasKey("GroundId");

                    b.ToTable("Ground");
                });

            modelBuilder.Entity("CricketApp.Domain.HowOut", b =>
                {
                    b.Property<int>("HowOutId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Normalize");

                    b.HasKey("HowOutId");

                    b.ToTable("HowOut");
                });

            modelBuilder.Entity("CricketApp.Domain.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateOfMatch");

                    b.Property<string>("FileName");

                    b.Property<int?>("GroundId");

                    b.Property<int>("HomeTeamId");

                    b.Property<float?>("HomeTeamOvers");

                    b.Property<string>("MatchDescription");

                    b.Property<int>("MatchOvers");

                    b.Property<int?>("MatchSeriesId");

                    b.Property<int>("MatchTypeId");

                    b.Property<float?>("OppTeamOvers");

                    b.Property<int>("OppponentTeamId");

                    b.Property<int?>("PlayerId");

                    b.Property<int?>("PlayerOTM");

                    b.Property<string>("Result")
                        .IsRequired();

                    b.Property<int?>("Season");

                    b.Property<int?>("TossWinningTeam");

                    b.Property<int?>("TournamentId");

                    b.Property<int?>("TournamentStageId");

                    b.Property<int>("UserId");

                    b.HasKey("MatchId");

                    b.HasIndex("GroundId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("MatchSeriesId");

                    b.HasIndex("MatchTypeId");

                    b.HasIndex("OppponentTeamId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("TournamentStageId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CricketApp.Domain.MatchSchedule", b =>
                {
                    b.Property<long>("MatchScheduleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Day");

                    b.Property<string>("GroundName");

                    b.Property<string>("Month");

                    b.Property<string>("OpponentTeam");

                    b.Property<int>("TeamId");

                    b.Property<int?>("Year");

                    b.HasKey("MatchScheduleId");

                    b.HasIndex("TeamId");

                    b.ToTable("MatchSchedule");
                });

            modelBuilder.Entity("CricketApp.Domain.MatchSeries", b =>
                {
                    b.Property<int>("MatchSeriesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Organizor");

                    b.Property<DateTime?>("StartingDate");

                    b.Property<int?>("TenantUserId");

                    b.Property<int>("UserId");

                    b.HasKey("MatchSeriesId");

                    b.HasIndex("TenantUserId");

                    b.ToTable("MatchSeries");
                });

            modelBuilder.Entity("CricketApp.Domain.MatchType", b =>
                {
                    b.Property<int>("MatchTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MatchTypeName");

                    b.HasKey("MatchTypeId");

                    b.ToTable("MatchType");
                });

            modelBuilder.Entity("CricketApp.Domain.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int?>("BattingStyleId");

                    b.Property<int?>("BowlingStyleId");

                    b.Property<string>("CNIC");

                    b.Property<string>("Contact");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("FileName");

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<bool>("IsDeactivated");

                    b.Property<string>("IsGuestorRegistered");

                    b.Property<int?>("PlayerRoleId");

                    b.Property<string>("Player_Name")
                        .IsRequired();

                    b.Property<int>("TeamId");

                    b.HasKey("PlayerId");

                    b.HasIndex("BattingStyleId");

                    b.HasIndex("BowlingStyleId");

                    b.HasIndex("PlayerRoleId");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("CricketApp.Domain.PlayerPastRecord", b =>
                {
                    b.Property<int>("PlayerPastRecordId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BestScore");

                    b.Property<int?>("DoBowled");

                    b.Property<int?>("DoCatch");

                    b.Property<int?>("DoHitWicket");

                    b.Property<int?>("DoLBW");

                    b.Property<int?>("DoStump");

                    b.Property<int?>("FiveWickets");

                    b.Property<int?>("GetBowled");

                    b.Property<int?>("GetCatch");

                    b.Property<int?>("GetHitWicket");

                    b.Property<int?>("GetLBW");

                    b.Property<int?>("GetRunOut");

                    b.Property<int?>("GetStump");

                    b.Property<int?>("NumberOf100s");

                    b.Property<int?>("NumberOf50s");

                    b.Property<int?>("OnFieldCatch");

                    b.Property<int?>("OnFieldRunOut");

                    b.Property<int?>("OnFieldStump");

                    b.Property<int>("PlayerId");

                    b.Property<int?>("TotalBallRuns");

                    b.Property<int?>("TotalBatBalls");

                    b.Property<int?>("TotalBatRuns");

                    b.Property<int?>("TotalFours");

                    b.Property<int?>("TotalInnings");

                    b.Property<int?>("TotalMaidens");

                    b.Property<int?>("TotalMatch");

                    b.Property<int?>("TotalNotOut");

                    b.Property<float?>("TotalOvers");

                    b.Property<int?>("TotalSixes");

                    b.Property<int?>("TotalWickets");

                    b.HasKey("PlayerPastRecordId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerPastRecord");
                });

            modelBuilder.Entity("CricketApp.Domain.PlayerRole", b =>
                {
                    b.Property<int>("PlayerRoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("PlayerRoleId");

                    b.ToTable("PlayerRole");
                });

            modelBuilder.Entity("CricketApp.Domain.PlayerScore", b =>
                {
                    b.Property<int>("PlayerScoreId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Ball_Runs");

                    b.Property<int?>("Bat_Balls");

                    b.Property<int?>("Bat_Runs");

                    b.Property<int?>("BowlerId");

                    b.Property<int?>("Catches");

                    b.Property<string>("Fielder");

                    b.Property<int?>("Four");

                    b.Property<int?>("HowOutId");

                    b.Property<bool>("IsPlayedInning");

                    b.Property<int?>("Maiden");

                    b.Property<int>("MatchId");

                    b.Property<float?>("Overs");

                    b.Property<int?>("PlayerId");

                    b.Property<int>("Position");

                    b.Property<int?>("RunOut");

                    b.Property<int?>("Six");

                    b.Property<int?>("Stump");

                    b.Property<int>("TeamId");

                    b.Property<int?>("Wickets");

                    b.HasKey("PlayerScoreId");

                    b.HasIndex("BowlerId");

                    b.HasIndex("HowOutId");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("PlayerScores");
                });

            modelBuilder.Entity("CricketApp.Domain.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Contact");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsRegistered");

                    b.Property<string>("Place")
                        .HasMaxLength(100);

                    b.Property<string>("Team_Name")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.Property<string>("Zone");

                    b.HasKey("TeamId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CricketApp.Domain.TeamScore", b =>
                {
                    b.Property<int>("TeamScoreId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Byes");

                    b.Property<int>("LegByes");

                    b.Property<int>("MatchId");

                    b.Property<int>("NoBalls");

                    b.Property<int>("TeamId");

                    b.Property<int>("TotalScore");

                    b.Property<int>("Wickets");

                    b.Property<int>("Wideballs");

                    b.HasKey("TeamScoreId");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamScores");
                });

            modelBuilder.Entity("CricketApp.Domain.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName");

                    b.Property<string>("Organizor");

                    b.Property<DateTime?>("StartingDate");

                    b.Property<int?>("TenantUserId");

                    b.Property<string>("TournamentName")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("TournamentId");

                    b.HasIndex("TenantUserId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("CricketApp.Domain.TournamentStage", b =>
                {
                    b.Property<int>("TournamentStageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("TournamentStageId");

                    b.ToTable("TournamentStages");
                });

            modelBuilder.Entity("CricketApp.Domain.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.Property<int?>("UserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CricketApp.Domain.ApplicationUser", b =>
                {
                    b.HasOne("CricketApp.Domain.ApplicationUserRole", "Role")
                        .WithMany("User")
                        .HasForeignKey("ApplicationUserRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CricketApp.Domain.FallOfWicket", b =>
                {
                    b.HasOne("CricketApp.Domain.Match", "Match")
                        .WithMany("FallOfWickets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CricketApp.Domain.Team", "Team")
                        .WithMany("FallOfWickets")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CricketApp.Domain.Match", b =>
                {
                    b.HasOne("CricketApp.Domain.Ground", "Ground")
                        .WithMany()
                        .HasForeignKey("GroundId");

                    b.HasOne("CricketApp.Domain.Team", "HomeTeam")
                        .WithMany("HomeTeamMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CricketApp.Domain.MatchSeries", "MatchSeries")
                        .WithMany("Matches")
                        .HasForeignKey("MatchSeriesId");

                    b.HasOne("CricketApp.Domain.MatchType", "MatchType")
                        .WithMany("Matches")
                        .HasForeignKey("MatchTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CricketApp.Domain.Team", "OppponentTeam")
                        .WithMany("OpponentTeamMatches")
                        .HasForeignKey("OppponentTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CricketApp.Domain.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("CricketApp.Domain.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId");

                    b.HasOne("CricketApp.Domain.TournamentStage", "TournamentStage")
                        .WithMany()
                        .HasForeignKey("TournamentStageId");
                });

            modelBuilder.Entity("CricketApp.Domain.MatchSchedule", b =>
                {
                    b.HasOne("CricketApp.Domain.Team", "Team")
                        .WithMany("MatchSchedules")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CricketApp.Domain.MatchSeries", b =>
                {
                    b.HasOne("CricketApp.Domain.ApplicationUser", "TenantUser")
                        .WithMany()
                        .HasForeignKey("TenantUserId");
                });

            modelBuilder.Entity("CricketApp.Domain.Player", b =>
                {
                    b.HasOne("CricketApp.Domain.BattingStyle", "BattingStyle")
                        .WithMany()
                        .HasForeignKey("BattingStyleId");

                    b.HasOne("CricketApp.Domain.BowlingStyle", "BowlingStyle")
                        .WithMany()
                        .HasForeignKey("BowlingStyleId");

                    b.HasOne("CricketApp.Domain.PlayerRole", "PlayerRole")
                        .WithMany()
                        .HasForeignKey("PlayerRoleId");

                    b.HasOne("CricketApp.Domain.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CricketApp.Domain.PlayerPastRecord", b =>
                {
                    b.HasOne("CricketApp.Domain.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CricketApp.Domain.PlayerScore", b =>
                {
                    b.HasOne("CricketApp.Domain.Player", "Bowler")
                        .WithMany()
                        .HasForeignKey("BowlerId");

                    b.HasOne("CricketApp.Domain.HowOut", "HowOut")
                        .WithMany()
                        .HasForeignKey("HowOutId");

                    b.HasOne("CricketApp.Domain.Match", "Match")
                        .WithMany("PlayerScores")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CricketApp.Domain.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("CricketApp.Domain.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CricketApp.Domain.Team", b =>
                {
                    b.HasOne("CricketApp.Domain.ApplicationUser", "User")
                        .WithOne("Team")
                        .HasForeignKey("CricketApp.Domain.Team", "UserId");
                });

            modelBuilder.Entity("CricketApp.Domain.TeamScore", b =>
                {
                    b.HasOne("CricketApp.Domain.Match", "Match")
                        .WithMany("TeamScores")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CricketApp.Domain.Team", "Team")
                        .WithMany("TeamScores")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CricketApp.Domain.Tournament", b =>
                {
                    b.HasOne("CricketApp.Domain.ApplicationUser", "TenantUser")
                        .WithMany()
                        .HasForeignKey("TenantUserId");
                });

            modelBuilder.Entity("CricketApp.Domain.UserRole", b =>
                {
                    b.HasOne("CricketApp.Domain.ApplicationUserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CricketApp.Domain.ApplicationUserRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId1");

                    b.HasOne("CricketApp.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CricketApp.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CricketApp.Domain.ApplicationUserRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CricketApp.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CricketApp.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CricketApp.Domain.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
