@model IdentityDemo.Models.AccountViewModels.ForgotPasswordViewModel

@{
    Layout = "_LoginLayout";
}
<div class="container">
    <div class="row">

        <div class='col-md-3'></div>
        <div class="col-md-6">
            <div class="center gap fade-down section-heading">
                <img id="logo" src="~/images/ScoreExec copy.png" />
            </div>
            <form asp-action="ForgotPassword" enctype="multipart/form-data">

                <div class="form-group has-feedback">
                    <input type="email" id="Email" class="form-control" asp-for="Email" placeholder="Email">
                    <span id="EmailError"></span>
                </div>
                <div class="row">
                    <!-- /.col -->
                    <div class="col-xs-4">
                        <button type="submit" disabled id="CreateBtn" class="btn btn-primary btn-block btn-flat">Send Code</button>
                    </div>
                    <!-- /.col -->
                </div>
            </form>

            <a id="Register" style="cursor: pointer" class="text-center">Register a new membership</a>
        </div>
        <div class='col-md-3'></div>
    </div>
</div>


@section scripts {

    <style>
        #logo {
            background-image: url('');
            background-size: cover;
            background-position: center;
            height: 80px;
            width: 300px;
        }
    </style>
    <script>

        $('#Register').click(function () {
            $(function () {
                window.location = '/Account/Register'
            });

        })
        var header = new Headers();
        header.append("content-type", "application/json");

        const state = {
            isEmailValid: true
        };
        function validateEmail(email) {
            var re = /^(([^<>()\[\]\\.,;:\s@@"]+(\.[^<>()\[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(String(email).toLowerCase());
        }

        $('#Email').blur(function () {

            const email = $('#Email').val();
            if (validateEmail(email)) {

                fetch(`/Account/IsEmailAvailable?email=${email}`, {
                    method: "GET",
                    credentials: 'same-origin',
                    headers: header
                }).then(res => {
                    const body = res.json().then(data => {
                        if (data) {
                            document.getElementById("EmailError").innerHTML = "This is registered email";
                            document.getElementById("EmailError").style.color = "#32CD32";
                            state.isEmailValid = true;
                            updateState(state);
                        }
                        else {

                            document.getElementById("EmailError").innerHTML = "This Email is not registered";
                            document.getElementById("EmailError").style.color = "#FF0000";
                            state.isEmailValid = false;
                            updateState(state);
                            return;
                        }

                    })
                });

                return;
            }
            else {
                document.getElementById("EmailError").style.color = "#FF0000";
                document.getElementById("EmailError").innerHTML = "Insert a valid email address";
                state.isEmailValid = false;
                updateState(state);
                return;

            }

        });

        const updateState = (state) => {
            if (state.isEmailValid) {
                $("#CreateBtn").removeAttr("disabled");

            } else {
                $("#CreateBtn").attr("disabled", "disabled");

            }

        };

    </script>
}